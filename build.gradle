/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.7/samples
 *
 * Generated by m30pm during project creation.
 */

plugins {
    id 'base'
}

def schemaFileName = "computational-analysis-schema.yaml"
def schemaSrcDirName = "model/schema"
def schemaSrcDir = "$projectDir/$schemaSrcDirName"
def schemaBuildDirName = "$schemaSrcDirName"
def schemaBuildDir = "$buildDir/$schemaBuildDirName"
def modelBuildFileName = "model.json"
def modelSrcDirName = "model/examples"
def modelSrcDir = "$projectDir/$modelSrcDirName"
def modelSrcExt = ".yaml"
def modelBuildDirName = "$modelSrcDirName"
def modelBuildDir = "$buildDir/$modelBuildDirName"
def modelBuildExt = ".json"
def unifiedModelPath = "$modelBuildDir/$modelBuildFileName"
def nunjucks = "$projectDir/node_modules/.bin/nunjucks"
def querySrcFileName = "run_analysis.py.njk"
def querySrcDirName = "views/queries"
def querySrcDir = "$projectDir/$querySrcDirName"
def queryBuildDirName = "$querySrcDirName"
def queryBuildDir = "$buildDir/$queryBuildDirName"
def queryBuildExt = ".py"
def queryResultsDirName = "$querySrcDirName/results"
def queryResultsDir = "$buildDir/$queryResultsDirName"
def queryResultsExt = ".json"
def reportTemplateFileName = "analysis_report.md.njk"
def reportFileName = "analysis_report.md"
def reportSrcDirName = "views"
def reportTemplateDir = "$projectDir/$reportSrcDirName"
def reportTemplatePath = "$reportTemplateDir/$reportTemplateFileName"
def reportBuildDirName = "$reportSrcDirName/reports"
def reportBuildDir = "$buildDir/$reportBuildDirName"
def reportExt = ".md"

tasks.register('buildUnifiedSchema') {
    inputs.files(fileTree("$schemaSrcDir"))
        .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$schemaBuildDir"))
    doLast {
        fileTree("$schemaSrcDir").matching {
            include "**/*$modelSrcExt"
        }.each { file ->
            exec {
                commandLine "bash", "-c", "gen-yaml $file --mergeimports > $schemaBuildDir/$file.name"
            }
        }
    }
}

tasks.register('cleanupUnifiedSchema') {
    dependsOn(buildUnifiedSchema)
    inputs.files(fileTree("$schemaSrcDir"))
        .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$schemaBuildDir"))
    doLast {
        fileTree("$schemaBuildDir").matching {
            include "**/*$modelSrcExt"
        }.each { file ->
            exec {
                commandLine "yq", "-i", "del(.imports)", "$schemaBuildDir/$file.name"
            }
        }
    }
}

tasks.register('buildModel') {
    dependsOn(cleanupUnifiedSchema)
    inputs.files(fileTree("$modelSrcDir"))
    .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$modelBuildDir"))
    doLast {
        fileTree("$modelSrcDir").matching {
            include "**/*$modelSrcExt"
        }.each { file ->
            exec {
                commandLine "bash", "-c", "yq -o=json $file > $modelBuildDir/$file.name$modelBuildExt"
            }
        }
    }
}

tasks.register('validateModel') {
    dependsOn(buildModel)
    inputs.files(fileTree("$modelBuildDir"))
    .withPathSensitivity(PathSensitivity.ABSOLUTE)
    doLast {
        fileTree("$modelBuildDir").matching {
            include "*$modelBuildExt"
        }.each { file ->
            exec {
                commandLine "linkml-validate", "-s", "$schemaBuildDir/$schemaFileName", "$modelBuildDir/$file.name"
            }
        }
    }
}

tasks.register('buildQuery') {
    dependsOn(validateModel)
    inputs.files(fileTree("$modelBuildDir"))
        .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$queryBuildDir"))
    doLast {
       fileTree("$modelBuildDir").matching {
           include "**/*$modelBuildExt"
       }.each { file ->
           exec {
               commandLine "bash", "-c", "npm exec -- nunjucks -d $file $querySrcDir/$querySrcFileName > $queryBuildDir/$file.name$queryBuildExt"
           }
       }
    }
}

tasks.register('getQueryResults') {
    dependsOn(buildQuery)
    inputs.files(fileTree("$queryBuildDir"))
        .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$queryResultsDir"))
    doLast {
        fileTree("$queryBuildDir").matching {
            include "*$queryBuildExt"
        }.each { file ->
           exec {
                commandLine "bash", "-c", "python $queryBuildDir/$file.name > $queryResultsDir/$file.name$queryResultsExt"
           }
       }
    }
}

tasks.register('generateReport') {
    dependsOn(getQueryResults)
    inputs.files(fileTree("$queryResultsDir"))
        .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$reportBuildDir"))
    doLast {
        fileTree("$queryResultsDir").matching {
            include "*$queryResultsExt"
        }.each { file ->
            exec {
                commandLine "bash", "-c", "npm exec -- nunjucks -d $file $reportTemplatePath > $reportBuildDir/$file.name$reportExt && cat $reportBuildDir/$file.name$reportExt"
            }
        }
    }
}

tasks.named("assemble") {
    dependsOn(generateReport)
}

